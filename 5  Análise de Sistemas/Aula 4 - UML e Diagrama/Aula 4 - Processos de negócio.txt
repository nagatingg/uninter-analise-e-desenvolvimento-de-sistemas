Análise de Sistemas - Adriana Bastos

---------------  Aula 4 - UML e Diagrama ---------------------

    Análise de Sistemas
        Projetar e construir um programa de computador não é uma tarefa trivial, pois envolve conhecer bem o problea que se quer resolver e traduzir a solução ideal para o problema em linhas de código, portanto, entender bem os requisitos ou o que o software precisa fazer para atender às necessidades do cliente é a base de tudo

----- O que é UML

    A Unified Modelling Language (UML)
        É uma linguagem ou notação de diagramas para especificar, visualizar e documentar modelos de software desenvolvidos sob os preceitos da orientação por objetos

        Como a UML não é método de desenvolvimento, ela não diz o que fazer primeiro, o que fazer depois ou como desenhar o sistema, mas ajuda a visualizá-lo e a comunicá-lo para os outros.

    O que são modelos?
        Um modelo de processo de desenvolvimento de software, ou simplesmente modelo de processo, pode ser visto como uma representação, ou abstração dos objetos e atividades envolvidas no processo de Software

        Dessa forma, um modelo é uma simplificação ou uma abstração da realidade que é construído para compreender melhor o sistema que será desenvolvido e codificado

    Tipos de Modelo
        Na UML, os modelos expressam duas visões diferentes, porém complementares
            Visão Estrutural
                Os modelos criados tentam capturar a estrutura do sistema, ou seja, quais elementos compõem a estrutura do sistema e como eles se relacionam

            Visão comportamental
                Os modelos criados tentam capturar a dinâmica do sistema, ou seja, como os elementos que compõem o sistema se comunicam e como se comportam e respondem aos diversos estímulos

----- Modelo orientado a objetos

    A orientação a objetos é um processo conceitual independente de uma linguagem de programação, pois tem como foco visualizar o domínio do problema a ser automatizado como uma coleção de objetos e métodos associados

    Todo objetivo é identificável e deve ter um nome claro e direto, que identifique o real objetivo do objeto
        Ou seja, as coisas do mundo real são denominadas de objetos. Um objetovo é, portanto, uma entidade real ou abstrata, que modela um conceito presente na realidade humana, ocupando espaço físico ou lógico
            Objetivo fícos ou lógico

        Abstração
            A abstração consiste em se concentrar nos aspectos essenciais, próprios de uma entidade e em ignorar suas propriedades acidentais
                Ou seja, dar foco em aspectos relevantes para um determinado propósito
                    Focar naquele determinado objetivo, naquela funcionalidade
        
        Encapsulamento
            Consiste na separação dos aspectos externos de um objeto, acessíveis por outros objetos, dos detalhes internos da implementação daquele objeto, que ficam ocultos dos deamsi objetos
                Ou melhor, significa separar o software em partes, o mais isoladas possível

        Herança
            É o compartilhamento de atributos e operações entre objetos com base em um relacionamento hierárquico
            
            Permite que a estrutura comun seja compartilhada por diversos outros objetos relacionados, sem redundâncias

------- Técnicas de Construção do Diagrama de Casos de Uso

    O diagrama de caso de uso normalmente é o primeiro diagrama a ser construído, após o levantamento de requisitos

    O diagrama de casos de uso é bastante utilizado em projeto por vários motivos, tais como:
        São utilizados para expressar a fronteira do sistema, mostram a visão estática do caso de uso, pois a visão dinãmica do caso de uso é especificada através da descrição dos cenários, além disso, por serem representações gráficas, permitem uma visão geral dos relacionamentos entre os casos de uso e os atores de um sistema

    Os leemtnos que aparecem no diagrama de caso de uso do exemplo anterior são:
        Os atores, que são representados pelos bonecos

        Os caso de uso, que são representados pelas circuferências

        Os relacionamentos, que são representados por linhas retas ou pontilhadas, dependendo do tipo de relacionamento

    UML Características
        Utiliza um padrão fácil de ser compreendido mesmo por quem não é de TI

        O foco é o problema e não a solução computacional, por isso o diagrama de caso de uso representa os requisitos funcionais do software

        Permite registrar de fato o que sistema deve fazer, e como as funcionalidades do software

-------- Componentes de um Diagrama de Caso de Uso

        Os componentes de um diagrama de caso de uso também são chamados de elementos, e compõem a identidade visual do modelo UML

        Para entender um diagrama, é preciso entender a linguagem utilizada na sua construção

        A linguagem apresenta a seguir é a linguagem UML

    Ator

        O ator representa o papel executado por uma entidade que interage com o sistema em questão
            Um ator troca informações com o sistema, e pode ser um indivíduo ou outros sistemas, ou seja, o ator interage com o sistema, ele não faz parte do sistema

        Um usuário pode executar o papel de vários atores diferentes e um determinado ator pode ser representado por vários usuários

    Relacionamentos
        Mostram a ligação entre os elementos de um diagrama de caso de uso, ou seja, mostram a ligação dos atores com os casos de uso e dos casos de uso entre si

        Mostram quais atores têm acesso a cada caso de uso e como os casos de uso se relacionam, apresentando dinâmica de interação entre eles, focando no entendimento do funcionamento dos processo de negócio

    Relacionamento entre atores
        A generalização é identificada quando temos dois atores semelhantes, mas com um deles realizando algo a mais

        Ela deve ser identificada e validade com cuidado para não modelar relacionamentos desnecessários a um determinado ator, ou mesmo não demonstrar relacionamentos que devem ocorrer para garantir o bom funcionamento do software

    Relacionamento entre casos de uso
        Include
            Um relacionamento include de um caso de uso A para um caso de usbo B, indica que B é essencila para o comportamento de A

            pode ser dito também que B is_part_of A

        Extend
            Um relacionamento extend de um caso de uso B para um caso de uso A indica que o caso de uso B pode ser acrescentado para descrever o comportamento de A ( não é essencial )

            Ponto de extensão em um caso de uso é uma indicação de que outros casos de uso poderão ser adicionados a ele

            Quando o caso de uso for invocado, ele verificará se suas extensões devem ou não ser invocadas

-------- Analisando um exemplo de Diagrama de Caso de Uso

    Exemplo salvo na pasta

    









	
