Fundamentos de Desenvolvimento de Software - Prof. Luciane Yanase Hirabara Kanashiro

---------------  Aula 3 ---------------------
Desenvolvimento Colaborativo: do início ao fim

Assuntos abordados na Aula:
    Teremos uma visão geral sobre o desenvolvimento colaborativo:
        -Como nasce um Software
        -Ferramentas colaborativas
        -Conceito de reúso e versionamento
        -Testes de Software

----- Como nasce um Software
Rotina para o desenvolvimento de Software
    Baixar o código -> Codificar -> Validar -> Integrar -> Testar

-Baixar o código
    Aquisição de código / Atualização da versão no repositório

-Codificar
    Observar boas práticas de programação / legibilidade do código / Padrão nomeação

-Validar
    Tudo funciona de acordo com o que foi especificado?

-Integrar
    Integração por meio de sistema de controle de versão

-Testar
    Automatização de testes, e realização das atividades de testes durante a codificação
    Não tem obrigatoriedade de ser apenas no final, pode ser feito durante cada fase

-Trabalho em equipe e boas práticas em reuniões
    Pessoas que fazem um Software
    Relembrando: daily scrum
        -Priorizar tarefas
        -Comunicação com a equipe
        -Foco no cliente
    Times são formado por Pessoas
    O trabalho em equipe e a colaboração ampactam no sucesso de uma aplicação
    Uma equipe que não colabora, que não sabe em quê o outro parceiro está 
        trabalhando, uma equipe cansada não rende!

-Reunião
    Boa estratégia para saber em quê cada um do time está trabalhando e quais
        tarefas são prioridades
    Excesso de reuniões pode atrapalhar a produtividade

-Pesquisa Havard Business Review
    90% sonham acordado em reuniões
    73% fazem outro trabalho

-Pesquisa MPRJ/INOVA
    82.3% Escolha criteoriosa de temas
    91.6% Envio prévio da pauta
    89.4% Definição de quem faz o quê
    68.1% Limitação de participantes
    85.8% Limitação do tempo total de reunião

-Boas práticas em reuniões

    Para conduzir uma reunião, são elencados os seguintes fatores:
        Não se atrase para a reunião
        Quem faz o convite deve guiar a reunião
        Prepare-se para a reunião
        Apresente todos os participantes
        Estabeleça as regras da reunião
        Seja direto e objetivo
        Pergunte como as pessoas estão se sentindo

    Para que as reuniões sejam mais eficientes, os seguintes fatores são elencados:
        Verifique se o assunto, de fato, pede uma reunião
        Marque reuniões mais curtas
        Evite encontros fora do horário comercial e tente não remarcar
        Envie o convite já com um contexto do que será abordado
        Convide apenas pessoas realmente necessárias para o encontros
        Esteja presente e vite distrações
        Tenha sempre cuidado com a câmera e o microfone
        Faça uma ata da reunião remota

-Zoom fadigue
    Termo que se refere aos aspectos negativos da videoconferência em geral
    Está associado ao uso prolongado e repetido de ferramentas de videoconferência

-Causas
    Excesso de contato visual
    Muito tempo vendo a si mesmo
    Redução de mobilidade
    Videochamadas demandam maior carga cognitiva
    

-------Ferramentas colaborativas de trabalho em equipe

-Ferramentas de colaboração
    As feramentas de colaboração são softwares ou plataformas que permitem
        o compartilhamento de arquivos e a efetiva comunicação entre os integrantes
        de um mesmo projeto

-Trello
    Anteriormente denominado feramenta de gestão on-line para métodos ágeis
    Versões: gratuita (recursos limitados), standard e premium (mais completa e cara)
    Conceito: quadros, listas e cartões
    Permite gerenciar tarefas com facilidade
    Cartões: mantêm informações necessárias organizadas e em um só lugar

-Jira
    Ferramenta para gestão de projetos
    Painel Scrum personalizado para o próximo sprint
    Exclusivo para desenvolvimento ágil, sendo mais indicado para grandes empresas
    
-Jira Antes e Hoje
    Antes: rastreador de bugs e itens / truncamento de godzila / bugzila
    Hoje: gestão ágil de projetos / Suporte à metodologia ágil

-Diferenças Jira x Trello
    Jira
        Colaboração entre os integrandes do time
        Criado pela empresa australiana Atlassian
        Requer instalação

    Trello
        Painel flexível e visual para trocar idieias sobre novos produtos
        Criado por subsidiária da Atlassian
        Aplicação na nuvem

-----IMAGEM SALVA EXPLICANDO MELHOR AS DIFERENÇAS A SEGUIR Trelo vs Jira

    Planeje e acompanha o trabalho das equipes que desenvolvem, executam e dão
    suporte ao software
        Trello ( Indisponível ) - Jira ( Disponível )

	Faça retrospectivas e reuniões sobre o sprint
        Trello ( Disponível ) - Jira ( Indisponível )

    Troque ideias sobre desenvolvimento e produtos
        Trello ( Disponível ) - Jira ( Indisponível )

    Integração com Bitbucket ou GitHub
        Trello ( Disponível ) - Jira ( Disponível )

    Fácil de configurar e gerenciar
        Trello ( Disponível ) - Jira ( Disponível )
            Fonte: Atlassian

------Slack
    Ferramenta de mensagem
    Uma das ferramentas mais conhecidas e utilizadas no setor corporativo
    Utiliza o conceito de canais
    Espaços organizados para cada aspecto do trabalho

-----Teams
    Objetivo principal: substituir o e-mail
    Ferramentas:
        Chamadas de vídeo
        Edição de documentos
        Integração com outros aplicativos da Microsoft

-----Discord
    Aplicativo para conectar gamers
    Sua evolução permitiu que atualmente seja usado no mundo corporativo
    Pode ser utilizado on-line sem necessidade de instalação

-----Zoom
    Plataforma de reunião virtual mais conhecida e utilizada no mundo
    Videoconferência e troca de mensagens simplificadas entre qualquer dispositivo 
	Permite a colaboração móvel

-----------------------------------------------------

-------------Versionamento e Reúso

-----Reúso
    Diz respeito a qualquer parte de um sistema implementado anteriormente, podendo
        ser uma especificação, módulo, arquitetura e padrões, dentre outras

-Reúso (Sommerville,2019)
    O reúso pode ser empregado em qualquer fase do projeto, desde a concepção até sua
    implantação, e cada técnica aplicada dependerá dos requisitos do sistema, da 
    tecnologia, de ativos reusáveis disponíveis e do conhecimento da equipe de
    desenvolvimento.

----Vantagens
    As vantagens para reúso de código incluem o aumento na produtivadade, redução
        do tempo de entrega do produto e consequentemente aumento da qualidade do 
        software.

---Qualidade e reúso
    Fator de qualidade ->
        Funcionalidade / Confiabilidade / Usabilidade / Manutebilidade / Portabilidade
            Fonte: Kanashiro, 2022 ( Imagem Salva )

    Funcionalidade: reutilizar um módulo como protótipo, assim descobrindo novas 
        funcionalidades ou novos requisitos para nosso produto de software

    Confiabilidade: geralmente quando um produto é desenvolvido para o reúso, ele
        geralmente tem muito mais testes, dessa forma, sua confiabilidade é maior

    Usabilidade: mesmo princípio da confiabilidade

    Manutebilidade: manutenção, modificações que poderiam ser feito futuramente, já
        são abordadas com maior frequente por conta do reúso

    Portabilidade: geralmente quando um software é desenvolvimento com a intenção de
        ser explorado o reúso, sua portabilidade é naturalmente incorporada como
        um dos fatores principais.

--Pergunta aleatória:
-Mas se o reúso traz tantos benefícios, então por que não temos um maior número de
    empresas que utilizam o reúso para abreviar o processo de desenvolvimento?

------------Problemas

-Síndrome NIH: 
    Rotina não é boa, a menos que o próprio desenvolvedor a tenha escrito

-Medo de falhas: 
    Reutilização pode introduzir falhas no produto

-Custo da reutilização: 
    Tornar algo reutilizável
    Reutilizar
    Definir e implementar um processo de reutilização

-Quedtões legais:
    Software sob contrato
    Violação de copyright

-Compreender a parte reutilizada:
    O que reusar e como reusar?

-Mudança na mentalidade da equipe:
    Objetivos e benéficios do reúso muitas vezes são percebidos apenas a longo prazo

------REÚSO E VERSIONAMENTO
Diagrama:
Armaneza arquivo      | Acessar e recuperar última versão | Submeter alteração
Registrar HIstórico   |          Copiar e Alterar         | Recuperar as atualizações

Fonte: Kanashiro, 2022

-----Repositório de Códigos
    Guardamos todos os artefatos (componentes, códigos) em repositórios
    2 perspectivas de repositório:
        Repositório de gerência de configuração
        Repositório de reutilização

-Repositórios de gerência de configuração
    Sistemas de controle de versão
    VCS (Version Control System)
    SCM (do inglês Source Code Managament)
    Gerenciar várias versões no desenvolvimento do PROJETO
    Gestão inteligente e eficaz para organizar o projeto
    Acompanhamento de históricos de desenvolvimento
    Customização de determinada versão sem alterar o projeto principal
    Recuperação de versão anterior

-Sistemas de controle de versão
    Existem dois tipos de sistema de controle de versão:
        -Centralizado: composto por um único servidor central e várias estações
        de trabalho

        -Descentralizado (distribuído): possuem diversos repositórios autônomos e
        independentes para cada desenvolvedor

-Sistemas de controle de versão (imagem salva na pasta)
    Git
        Desenvolvido por Linus Torvalds
        Linguagem C
        Distribuído
        Criada para versionar kernel Linux
        Interface gráfica agradável
        Eficaz

    Mercurial
        Distribuído
        Open Source
        Grandes empresas (facebook e google)
        Escrita em python e parte em C
        Interface fácil e intuitiva

    Subversion
        SVN
        Centralizado
        Código aberto (open source)
        Para equipes menores
        2000: CollabNet
        2010: Apache subversion

    BitKeper
        Originou Git
        Distribuído
        2016: Open Source
        Licença Apache 2.0
        Projetos grandes e pequenos

-Repositório de reutilização (imagem salva na pasta)
    Bootstrap
        Biblioteca de componentes front-end
        Ferramenta gratuita -HTML, CSS e JS
        Abordagem mobile first

    Github
        Hospedagem de código
        Controle de versão
        Repositório abertos

    Spring
        Open Source para Java
        Baseado em padrões de projeto
        Injeção de dependência

    Angular
        Web front end desenvolvido pela Google utilizando typescript
        Aplicações mobile e aplicações web desktop

-Repositório de ideias
    Além dos repositórios de conteúdo tradicionais, temos ainda os chamados repositórios
    de ideias, que vão além de repositório de códigos, criando um espaço no qual os
    desenvolvedores e futuros desenvolvedores possam trocar informações e dicas sobre
    ferramentas, códigos e linguagens. A seguir, são listadas alguns desses repositórios

----Oracle Developer
    1977 SDL: Larry Ellison, Bob Miner e ED Oates
    1982: Oracle Corporation
    1995: Software via internet
    1999: Produto mais influente
    2010: Aquisição da Sun Microsystems Java Nuvem - entrada no mercado de nuvem

    O site da Oracle developer traz dicas, eventos e ferramentas para desenvolvedores
    Vários códigos para desenvolvedores e futuros desenvolvedores no github
    Missão: capacitar os desenvolvedores e continuar apoiando tecnologias de código aberto

----Cisco
    -Cisco DevNet: programa de desenvolvedor da Cisco que ajuda desenvolvedores e 
    profissionais de TI a desenvolver aplicativos e implementar integrações
    
    -Netacad: um programa global de educação de TI e segurança cibernética que forma
    parcerias com instituições de ensino em todo o mundo, para capacitar pessoas com
    oportunidades de carreira

-Cisco - NetAcad
    A netacad começou como um ato comunitário. Em 1997, a Cisco doou alguns equipamentos
    de rede para uma escola local, mas ninguém recebeu treinamento, e os equipamentos
    ficaram inutilizados.

   Doação Inicial -> Observação importante: A tecnologia tem um poder transformador
                     quando combinada com a educação

    Ensinar -> Parceria -> Contratar
    190 países - 29 mil educadores - 12 mil academias

    A netacad nasceu naquele dia, enquanto a cisco treinava os professores para
    construir suas redes
            Fonte: Npeter / Shutterstock
            Gorodenkoff/Shutterstock
            Asdf_mEDIA/Shutterstock
            iNK dROP/Shutterstock

-AWS
    1994: Jeff Bezos - Loja de Livros
    2000: Infra TI
    2002: AWS

AWS(Amazon Web Services)
Dogfooding ("Comer sua própria comida de cachorro")
Gíria de TI: desenvolvimento e utilização de seus próprios serviços
AWS Academy: currículo de computação na nuvem
    Fonte: Amazon, 2022

-Mozzila
    Firefox
    MDN - Mozilla Developers Networks
    Documentação de aprendizagem:
        tecnologias da Web
        Software que alimenta a web

-Outras fontes
    Manual do Python
        Referência da Linguagem
        Sintaxe e semântica da linguagem
        Biblioteca Padrão

    Site do Java
        Oracle
        Sessão developer
        Tutoriais

    W3Schools
        Referências e exemplo didáticos de comandos
        Desenvolvimento web
        Exemplos de várias linguagens: C, Java e Python

-----------Testes de Software, controle de qualidade e deploy

-Teste de Software
    É um elemento de um tema mais amplo, muitas vezes conhecido como verificação e
    validação (V&V). Verificação refere-se ao conjunto de tarefas que garantem que o
    software implemente corretamente uma função específica. Validação refere-se ao
    conjunto de tarefas que asseguram que o software foi criado e pode ser rastreado
    segundo os requisitos do cliente. 
        Fonte: (Pressman, 2021, p.373)

-Teste de Software: 
    Garantir que o software funcione corretamente, atendendo àsespecificações.

-Objetivo: revelar os erros de um software

Error (Mistake): 
    uma ação humana que produz um resultado incorreto. ERRO/ENGANO
->
Fault: 
    Manifestação de um erro em software. Popularmente conhecido como bugs. DEFEITO/BUG
->
Failure:
    Incapacidade de um sistema ou componente de software de executar suas funções
        exigidas dentro dos requisitos de desempenho especificados. FALHA
            ---Uma failure ocorre quando uma fault é encontrada

Fonte: Luciane Yanase Hirabara Kanashiro, 2022

-----CUSTO para correção (imagem salva na pasta)

     Mais fácil - aumentando o custo gradativamente
Especificação -> Design -> Desenvolvimento -> Teste -> Liberação
Custos de modificar um software aumentam conforme o projeto avança

-Garantia de qualidade de software
    Os testes de software garantem, ainda, que a qualidade do produto seja alcançada

    Conjunto de atividades técnicas aplicadas durante todo o processo de desenvolvimento
    
    Esse conjunto de atividades engloba vários testes, a fim de se garantir um software
        de qualidade

-Estratégia de teste - espiral ( salva imagem nos arquivos, pressman)
    Teste de unidade -> código -> teste de integração -> projeto -> teste de validação
    -> requisitos -> teste de sistema -> engenharia de sistemas

Teste de Unidade
    Teste unitários
    Testar pequenas unidades em um sistema

Teste de Validação
    Software atende aos requisitos
    Programa faz o que é proposto a fazer

Teste de Integração
    Unidades se comunicam, se integram corretamente sem falhas
    Realizado após serem testadas as unidades individualmente
    
Teste de Sistema
    Testes de interface com o usuário
    Requisitos de acordo com o especificado
    Requistos foram atendidos

-Implantação - deployment
Necessário: além das dependências
    Interpretadores
    Compiladores
    Pacotes
    Extensões
    Configuração do ambiente
    Licenças de outros softwares
    Senhas de banco de dados

-Contêiner
Pacote que contém um software e todas as dependências necessárias para que ele execute

Fornece facilidade de manuseio e economia de tempo, facilitando a implantação (deploy)

Contêineres são um método de virtualização

-A diferença entre contêiner e máquina virtual está relacionada basicamente com escala
    e portabilidade 
        (imagem salva na pasta)

Virtualização - 
    Abstrair
    Dividir
    Duplicar
    Emular:
        Servidores
        SO - desktops
        BD
        Redes
    SO PRÓRIO, executa simultanemanete várias funções com uso intenso de recursos

Contâineres
    Contêm a aplicação e os arquivos necessários para executá-la
    Leve
    SO compartilhado
    Fáceis de migrar entre vários ambientes
    Empacotam funções individuais que realizam tarefas específicas (microsserviços)

---------------WEB / NUVEM
Redes de computadores
    Rede de computadores é um conjunto de computadores interligados

Meios de transmissão
    Meios físicos: utilizados para ligar os computadores em rede

    Fibra óptica         Sem fio                          Utiliza canais de rádio
    Par trançado         Não utilizam linha física        para transmitir sinais
    Coaxial                                               dentro do espectro eletromagnético

    Cabo                 Wireles                          Ondas de rádio
(Imagem salva na pasta)

-Extensão da Rede
    Distância física entre os computadores interligados
(imagem salva na pasta )
Lan
    Local Area Network
    pequena área geográfica
    conecta computadores, impressoras dentro de um prédio

Man
    Metropolitan Area Networks
    Ampla área geográfica
    Conecta Lans

Wan
    Wide Area Networks
    Ligação Remota
    Prestadores de serviço

-Como os computadores estão ligados na rede?
    Topologia

        Barramento
            Ligados no mesmo barramento físico
            Falha no cabo paralisa toda a rede

        Anel
            Dispositivos conectados formando um anel
            Falha no cabo em apenas um ponto, pode-se mudar o sentido de propagação
                para continuar operacional

        Estrela
            Ligados através cabos saindo de um equipamento central
            Falha no cabo, apenas o computador a ele conectado ficará fora da rede

                Fonte: Bakhtiar Zein / shutterstock
                (imagem salva na pasta)

-Protocolos de rede
    Conjunto de normas           
    Permitem comunicação entre máquinas
    Definem acordos para a transmissão de dados
            ->
        Aplicação: WWW.HTTTP,SMTP,FTP,SSH,TLS
        Transporte: TCP,UTP,SCTP
        Rede: IP
        Link: ETHERNET e MODEM

Uma camada só pode se comunicar com quem está abaixo ou acima

Analogia: Executamos protoclos o tempo todo

-Função do computador (IMAGEM SALVA NA PASTA)
    Cliente: utiliza algum recurso disponível na rede
    Servidor: disponibiliza recursos na rede

PEER-TO-PEER (P2P) NETWORK

Ponto a Ponto
    Inglês peer to peer
    Todos os computadores podem ter a função de cliente ou de servidor

Baseado em servidor
    Rede que possui computadores dedicados a tarefas específicas

------INTERNET
    Pode ser definida como uma rede de redes
    Benefício das redes: surgimento da Internet
    Principal característica técnica: descentralização

-início da Internet
    Criada em 1969, com o nome de ARPANET, pelo Departamento de Defesa dos EUA
    Objetivo: permitir que pesquisadores pudessem se comunicar

-A internet no Brasil
    1987 - FAPESP / LNCC começam a utilizar a internet
    1990 - RNP / EDUCAÇÃO dissiminar a internet no meio da educação
    1995 - Comercialmente começa a ser utilizada

 FAPESP - Fundação de Amaparo à Pesquisa do Estado de São PAULO
 LNCC - Laboratório Nacional de Computação Científica
 RNP - Rede Nacional de Ensino e Pesquisa

-Serviços
    Internet: infraestrutura que provê serviços a aplicações
    Serviços: são aplicações cliente/servidor que realizam que realizam alguma tarefa
        para o usuário

-Serviços
    Informações multmídia - www ( world wide web )
    Correio eletrônico (email)
    Colaboração interativa
    Busca de informações
    Transferência de arquivos
    Emulação de terminais
            O símbolo @ significa at ( em algum lugar)

----------------WEB
-World Wide Web
    A World Wide Web (WWW) É UM SISTEMA DE SERVIDORES INTERNET
    Protolo principal: HTTP ( HyperText Transfer Portocol)
    Web
    Confundida com a própria internet

-Web
    O termo web se deve à informação não ser organizada de forma linear, mas sim
        no formato de uma teia

-ínicio da www
    -1980 Tim Berners-Lee 
    projeto baseado no conceito de hipertexto
    facilitar compartilhamento e atualização de informações entre os pesquisadores

    -1989 Desenvolvida
    Tim Berners-Lee
    Hypertexto + Internet = www

    -1991 Lançamento
    Tim Berners-Lee
    Serviço para facilitar o acesso e apresentação de documentos acadêmicos na internet

    -1993 Marc Andressen
    Mosaic:
        primeira aplicação com interface gráfica de acesso a Web ( Browser)

-Páginas Web
    Webpage
    Informação apresentada em páginas hospedadas em servidores  wwww
    Documento escrito em HTML (hypertext markup language)
    Hyperxlinks ou hypertextos: permitem que o usuário acesse outro documento

-Site ou website:
    Conjunto de páginas relacionadas
    Hospedado em servidor web
    Possui endereço único
    Associado a um nome de domínio
        exemplo: www.mec.gov.br

-------Computação em Nuvem
    Nuvem: computador localizado em algum lugar acessado via Internet e usado
    Web services
    Cloud computing
        (imagem salva na pasta)

-Computação em nuvem
ANTES  | Compra e manutenção de computadores, principalmente servidores
DEPOIS | Recursos de armazenamento e de processamento compartilhados

ANTES  | Pensamento da infraestrutura como hardware ( gasto maior, compra de servidores)
DEPOIS | Considerar e utilizar infraestrutura como software

Como surgiu a computação em Nuvem
-1960 J.C.R Licklider Utilização de recursos computacionais por meio da internet
    John Mccarthy computação deveria ser organizada na forma de um serviço de utilidade
        em que os usuário só pagam pelo que usam
-1997 Ramnath Chellapa
    Usa pela primeira vez o termo computação em nuvem
-1999 Salesforce
    Primeira empresa que disponibiliza aplicações pela internet
-2002 Amazon 
    começa a oferecer serviços para outros sites
-2006 AWS
    Populariza a computação em nuvem

--------Modelos de computação em nuvem
-Os serviços de computação em nuvem oferecem:
    Infraestrutura de TI remota
    Acesso a utilização de aplicativos on-line
    Plataforma de desenvolvimento de software para criar e testar aplicativos via web

Serviços prestados em computação em nuvem
-IaaS
    Usuário gerencia o servidor e o sistema operacional
    Oferece capacidade de hardware ao usuário por meio de Software
    Exemplo: EC2 da AWS
    Windows Azure
    Você não tem o hardware físico, mas a capacidade via software

-PaaS
    Outra pessoa gerencia o hardware e o sistema operacional
    Ambiente de desenvolvimento remoto para que o usuário possa desenvolver uma 
    aplicação
    Exemplo: Elastic Beanstalk e RDS

-SaaS
    Usuário não precisa se preocupar com a intalação, manutenção ou atualização
    Usuário só precisa se preocupar com o software e como deseja usá-lo
    Exemplo: Facebook, dropox, office 365 e etc

-Modelo de implantação
(imagem salva na pasta)

    -All In Cloud
    Totalmente implantada na nuvem
    Exemplo: Você tem uma empresa, você contrata serviços de nuvem na nuvem

    -Modelo híbrido
    Conectar infraestrutura e aplicações entre web e recursos atuais que não se
    encontram na nuvem
    Ocorre conexão entre a nuvem e a infraestrutura local
    Exemplo: na empresa vão ter os servidores de banco de dados, para dados confidenciais
        e as outras aplicações normais, como site por exemplo, ficam localizadas em 
        serviços da nuvem

    -Nuvem privada
    Infraestrutura de nuvem por meio do próprio datacenter
    Benefícios: segurança dos dados

-Benefícios da nuvem
    Agilidade
        Recursos adicionais de TI estão ao alcance de apenas um clique

    Elasticidade
        Não precisa provisionar recursos em excesso
        Em outras palavras, não preciso necessariamente me preocupar com o pico do 
        servidor, se aumenta, só eu utilizar mais recursos em nuvem e pagar por isso

    Economia de custo
        Pare de gastar dinheiro com infraestrutura
        Pague apenas pelo que usarem (despesa variável)

    Implantação global em minutos
        Facilidade de implantação




	






















	
